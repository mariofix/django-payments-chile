{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-payments-chile","text":"<p><code>django-payments-chile</code> es una extensi\u00f3n para django-payments, una biblioteca que proporciona una interfaz universal para procesar pagos en aplicaciones Django. Este proyecto a\u00f1ade soporte espec\u00edfico para varios proveedores de pagos chilenos como Flow, Khipu, Webpay, y otros.</p> <p>\u26a0\ufe0f \u26a0\ufe0f Este proyecto est\u00e1 en desarrollo activo, usar con precauci\u00f3n. \u26a0\ufe0f \u26a0\ufe0f</p> <p> </p>"},{"location":"#proveedores-de-pago-soportados","title":"Proveedores de pago soportados","text":"Proveedor Estado Descripcion Flow \u2705 Plataforma chilena para pagos en l\u00ednea que admite m\u00faltiples m\u00e9todos de pago. Khipu \u2705 Permite pagos mediante transferencia electr\u00f3nica en tiempo real. Klap \u274c Soluci\u00f3n de pagos electr\u00f3nicos enfocados en comercios. Kushki \u274c Proveedor de pagos electr\u00f3nicos que facilita la integraci\u00f3n con diversas plataformas. Payku \u274c Plataforma de pagos enfocada en peque\u00f1as y medianas empresas. Webpay \u2705 El sistema de pago en l\u00ednea m\u00e1s utilizado en Chile, operado por Transbank."},{"location":"#inicio-rapido","title":"Inicio r\u00e1pido","text":""},{"location":"#instalacion","title":"Instalaci\u00f3n","text":"<p>La biblioteca <code>django-payments-chile</code> est\u00e1 disponible en PyPi. Puedes instalarla f\u00e1cilmente con tu gestor de paquetes favorito, como <code>pip</code>, <code>poetry</code>, o <code>pipenv</code>.</p> <pre><code>pip install django-payments-chile\n</code></pre>"},{"location":"#configuracion","title":"Configuraci\u00f3n","text":"<p>En tu archivo <code>settings.py</code>, configura los proveedores de pago que vas a utilizar:</p> <pre><code>PAYMENT_VARIANTS = {\n    'flow': ('payments_chile.flow.FlowProvider', {\n        'api_key': 'tu_api_key_flow',\n        'secret': 'tu_secret_flow',\n    }),\n    'webpay': ('payments_chile.webpay.WebpayProvider', {\n        'commerce_code': 'tu_commerce_code_webpay',\n        'api_key': 'tu_api_key_webpay',\n    }),\n    # Otros proveedores como khipu, klap, etc.\n}\n</code></pre>"},{"location":"#creacion-de-un-nuevo-pago","title":"Creaci\u00f3n de un nuevo pago","text":"<p>Con django-payments ya configurado, puedes crear un nuevo pago utilizando los m\u00e9todos nativos de la librer\u00eda:</p> <pre><code>from payments import get_payment_model\n\nPayment = get_payment_model()\n\npayment = Payment.objects.create(\n    variant='flow',  # o 'webpay', 'khipu', debe coincidir con el indice en PAYMENT_VARIANTS\n    description=\"Pago por Orden #123\",\n    total=10000,\n    currency='CLP',\n    billing_first_name='Juan',\n    billing_last_name='P\u00e9rez',\n    billing_email='juan.perez@example.com',\n)\n\n# Redirige al usuario al proveedor de pagos\nredirect_url = payment.get_process_url()\nreturn redirect(redirect_url)\n</code></pre> <p>Para m\u00e1s detalles sobre el flujo de pago y las respuestas de los proveedores, consulta la secci\u00f3n configuraci\u00f3n.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>Cambios notables de Django Payments Chile</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":"<ul> <li>Klap</li> <li>Kushki</li> <li>Pagofacil</li> </ul>"},{"location":"CHANGELOG/#2024124b","title":"[2024.12.4b]","text":"<ul> <li>Provider: Transbank WebPayPlus</li> </ul>"},{"location":"CHANGELOG/#2024123b","title":"[2024.12.3b]","text":"<ul> <li>Tests: Khipu</li> <li>Documentacion: Guias de Instalaci\u00f3n</li> </ul>"},{"location":"CHANGELOG/#2024122a","title":"[2024.12.2a]","text":"<ul> <li>Tests: Flow</li> <li>Provider: Khipu</li> </ul>"},{"location":"CHANGELOG/#2024121","title":"[2024.12.1]","text":"<ul> <li>Provider: Flow</li> </ul>"},{"location":"CHANGELOG/#2024929","title":"[2024.9.29]","text":"<ul> <li>Cambios en Documentacion</li> <li>Nuevos providers estructura base</li> </ul>"},{"location":"CHANGELOG/#2024923","title":"[2024.9.23]","text":"<ul> <li>Commit Inicial</li> </ul>"},{"location":"api-flowprovider/","title":"FlowProvider","text":""},{"location":"api-flowprovider/#django_payments_chile.FlowProvider.FlowProvider","title":"<code>FlowProvider</code>","text":"<p>               Bases: <code>BasicProvider</code></p> <p>FlowProvider es una clase que proporciona integraci\u00f3n con Flow para procesar pagos. Inicializa una instancia de FlowProvider con el key y el secreto de Flow.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>ApiKey entregada por Flow.</p> required <code>api_secret</code> <code>str</code> <p>ApiSecret entregada por Flow.</p> required <code>api_medio</code> <code>int | None</code> <p>Versi\u00f3n de la API de notificaciones a utilizar (Valor por defecto: 9).</p> <code>9</code> <code>api_endpoint</code> <code>str</code> <p>Ambiente flow, puede ser \"live\" o \"sandbox\" (Valor por defecto: live).</p> <code>'live'</code> <code>**kwargs</code> <code>int</code> <p>Argumentos adicionales.</p> <code>{}</code> Source code in <code>django_payments_chile/FlowProvider.py</code> <pre><code>class FlowProvider(BasicProvider):\n    \"\"\"\n    FlowProvider es una clase que proporciona integraci\u00f3n con Flow para procesar pagos.\n    Inicializa una instancia de FlowProvider con el key y el secreto de Flow.\n\n    Args:\n        api_key (str): ApiKey entregada por Flow.\n        api_secret (str): ApiSecret entregada por Flow.\n        api_medio (int | None): Versi\u00f3n de la API de notificaciones a utilizar (Valor por defecto: 9).\n        api_endpoint (str): Ambiente flow, puede ser \"live\" o \"sandbox\" (Valor por defecto: live).\n        **kwargs: Argumentos adicionales.\n    \"\"\"\n\n    form_class = BasePaymentForm\n    api_endpoint: str\n    api_key: str = None\n    api_secret: str = None\n    api_medio: int\n\n    def __init__(\n        self,\n        api_key: str,\n        api_secret: str,\n        api_endpoint: str = \"live\",\n        api_medio: int = 9,\n        **kwargs: int,\n    ):\n        super().__init__(**kwargs)\n        self.api_endpoint = api_endpoint\n        self.api_key = api_key\n        self.api_secret = api_secret\n        self.api_medio = api_medio\n        if self.api_endpoint == \"live\":\n            self.api_endpoint = \"https://www.flow.cl/api\"\n        elif self.api_endpoint == \"sandbox\":\n            self.api_endpoint = \"https://sandbox.flow.cl/api\"\n\n    def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n        \"\"\"\n        Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Flow.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            data (dict | None): Datos del formulario (opcional).\n\n        Returns:\n            Any: Formulario de pago redirigido a la p\u00e1gina de pago de Flow.\n\n        Raises:\n            RedirectNeeded: Redirige a la p\u00e1gina de pago de Flow.\n\n        \"\"\"\n        if not payment.transaction_id:\n            datos_para_flow = {\n                \"apiKey\": self.api_key,\n                \"commerceOrder\": str(payment.token),\n                \"urlReturn\": payment.get_success_url(),\n                \"urlConfirmation\": payment.get_process_url(),\n                \"subject\": payment.description,\n                \"amount\": int(payment.total),\n                \"paymentMethod\": self.api_medio,\n                \"currency\": payment.currency,\n            }\n\n            if payment.billing_email:\n                datos_para_flow.update({\"email\": payment.billing_email})\n\n            datos_para_flow.update(**self._extra_data(payment.attrs))\n\n            try:\n                payment.attrs.datos_payment_create_flow = datos_para_flow\n                payment.save()\n            except Exception as e:  # noqa\n                # Dificil llegar ac\u00e1, y si llegamos es problema de django-payments\n                raise PaymentError(f\"Ocurri\u00f3 un error al guardar attrs.datos_flow: {e}\")  # noqa\n            datos_para_flow = dict(sorted(datos_para_flow.items()))\n            firma_datos = ClienteAPI.genera_firma(datos_para_flow, self.api_secret)\n            datos_para_flow.update({\"s\": firma_datos})\n\n            try:\n                pago_req = requests.post(f\"{self.api_endpoint}/payment/create\", data=datos_para_flow, timeout=5)\n                pago_req.raise_for_status()\n\n            except Exception as pe:\n                payment.change_status(PaymentStatus.ERROR, str(pe))\n                raise PaymentError(pe)\n            else:\n                pago = pago_req.json()\n                payment.transaction_id = pago[\"token\"]\n                payment.attrs.respuesta_flow = {\n                    \"url\": pago[\"url\"],\n                    \"token\": pago[\"token\"],\n                    \"flowOrder\": pago[\"flowOrder\"],\n                }\n                payment.save()\n                payment.change_status(PaymentStatus.WAITING)\n\n            raise RedirectNeeded(f\"{pago['url']}?token={pago['token']}\")\n\n    def process_data(self, payment, request) -&gt; JsonResponse:\n        \"\"\"\n        Procesa los datos del pago recibidos desde Flow.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n        Returns:\n            JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n        \"\"\"\n        if \"token\" not in request.POST:\n            return HttpResponseBadRequest(\"token no est\u00e1 en post\")\n\n        if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n            self.actualiza_estado(payment=payment)\n\n        return JsonResponse({\"status\": \"ok\"})\n\n    def actualiza_estado(self, payment) -&gt; dict:\n        \"\"\"Actualiza el estado del pago con Flow\n\n        Args:\n            payment (\"Payment): Objeto de pago Django Payments.\n\n        Returns:\n            dict: Diccionario con valores del objeto `PaymentStatus`.\n        \"\"\"\n        datos_para_flow = {\"apiKey\": self.api_key, \"token\": payment.token}\n        datos_para_flow = dict(sorted(datos_para_flow.items()))\n        firma_datos = ClienteAPI.genera_firma(datos_para_flow, self.api_secret)\n        datos_para_flow.update({\"s\": firma_datos})\n\n        try:\n            # status = FlowPayment.getStatus(self._client, payment.transaction_id)\n            estado_req = requests.get(f\"{self.api_endpoint}/payment/getStatus\", data=datos_para_flow, timeout=5)\n            estado_req.raise_for_status()\n\n        except Exception as e:\n            raise e\n        else:\n            status = estado_req.json()\n            if status[\"status\"] == 2:\n                payment.change_status(PaymentStatus.CONFIRMED)\n            elif status[\"status\"] == 3:\n                payment.change_status(PaymentStatus.REJECTED)\n            elif status[\"status\"] == 4:\n                payment.change_status(PaymentStatus.ERROR)\n        return status\n\n    def _extra_data(self, attrs) -&gt; dict:\n        \"\"\"Busca los datos que son enviandos por django-payments y los saca del diccionario\n\n        Args:\n            attrs (\"PaymentAttributeProxy\"): Obtenido desde PaymentModel.extra_data\n\n        Returns:\n            dict: Diccionario con valores permitidos.\n        \"\"\"\n        try:\n            data = attrs.datos_extra\n        except AttributeError:\n            return {}\n\n        prohibidos = [\n            \"commerceOrder\",\n            \"urlReturn\",\n            \"urlConfirmation\",\n            \"amount\",\n            \"subject\",\n            \"paymentMethod\",\n            \"currency\",\n        ]\n        for valor in prohibidos:\n            if valor in data:\n                del data[valor]\n\n        return data\n\n    def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n        \"\"\"\n        Realiza un reembolso del pago.\n        El seguimiendo se debe hacer directamente en Flow\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            amount (int | None): Monto a reembolsar (opcional).\n\n        Returns:\n            int: Monto de reembolso solicitado.\n\n        Raises:\n            PaymentError: Error al crear el reembolso.\n\n        \"\"\"\n        if payment.status != PaymentStatus.CONFIRMED:\n            raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n        to_refund = amount or payment.total\n\n        datos_reembolso = {\n            \"apiKey\": self.api_key,\n            \"refundCommerceOrder\": payment.token,\n            \"receiverEmail\": payment.billing_email,\n            \"amount\": to_refund,\n            \"urlCallBack\": payment.get_process_url(),\n            \"commerceTrxId\": payment.token,\n            \"flowTrxId\": payment.attrs.respuesta_flow[\"flowOrder\"],\n        }\n        try:\n            refun_req = requests.post(f\"{self.api_endpoint}/refund/create\", data=datos_reembolso, timeout=5)\n            refun_req.raise_for_status()\n        except Exception as pe:\n            raise PaymentError(pe)\n        else:\n            payment.attrs.solicitud_reembolso = refun_req.json()\n            payment.save()\n            payment.change_status(PaymentStatus.REFUNDED)\n            return to_refund\n</code></pre>"},{"location":"api-flowprovider/#django_payments_chile.FlowProvider.FlowProvider.actualiza_estado","title":"<code>actualiza_estado(payment)</code>","text":"<p>Actualiza el estado del pago con Flow</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>\"Payment</code> <p>Objeto de pago Django Payments.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Diccionario con valores del objeto <code>PaymentStatus</code>.</p> Source code in <code>django_payments_chile/FlowProvider.py</code> <pre><code>def actualiza_estado(self, payment) -&gt; dict:\n    \"\"\"Actualiza el estado del pago con Flow\n\n    Args:\n        payment (\"Payment): Objeto de pago Django Payments.\n\n    Returns:\n        dict: Diccionario con valores del objeto `PaymentStatus`.\n    \"\"\"\n    datos_para_flow = {\"apiKey\": self.api_key, \"token\": payment.token}\n    datos_para_flow = dict(sorted(datos_para_flow.items()))\n    firma_datos = ClienteAPI.genera_firma(datos_para_flow, self.api_secret)\n    datos_para_flow.update({\"s\": firma_datos})\n\n    try:\n        # status = FlowPayment.getStatus(self._client, payment.transaction_id)\n        estado_req = requests.get(f\"{self.api_endpoint}/payment/getStatus\", data=datos_para_flow, timeout=5)\n        estado_req.raise_for_status()\n\n    except Exception as e:\n        raise e\n    else:\n        status = estado_req.json()\n        if status[\"status\"] == 2:\n            payment.change_status(PaymentStatus.CONFIRMED)\n        elif status[\"status\"] == 3:\n            payment.change_status(PaymentStatus.REJECTED)\n        elif status[\"status\"] == 4:\n            payment.change_status(PaymentStatus.ERROR)\n    return status\n</code></pre>"},{"location":"api-flowprovider/#django_payments_chile.FlowProvider.FlowProvider.get_form","title":"<code>get_form(payment, data=None)</code>","text":"<p>Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Flow.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>data</code> <code>dict | None</code> <p>Datos del formulario (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Formulario de pago redirigido a la p\u00e1gina de pago de Flow.</p> <p>Raises:</p> Type Description <code>RedirectNeeded</code> <p>Redirige a la p\u00e1gina de pago de Flow.</p> Source code in <code>django_payments_chile/FlowProvider.py</code> <pre><code>def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n    \"\"\"\n    Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Flow.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        data (dict | None): Datos del formulario (opcional).\n\n    Returns:\n        Any: Formulario de pago redirigido a la p\u00e1gina de pago de Flow.\n\n    Raises:\n        RedirectNeeded: Redirige a la p\u00e1gina de pago de Flow.\n\n    \"\"\"\n    if not payment.transaction_id:\n        datos_para_flow = {\n            \"apiKey\": self.api_key,\n            \"commerceOrder\": str(payment.token),\n            \"urlReturn\": payment.get_success_url(),\n            \"urlConfirmation\": payment.get_process_url(),\n            \"subject\": payment.description,\n            \"amount\": int(payment.total),\n            \"paymentMethod\": self.api_medio,\n            \"currency\": payment.currency,\n        }\n\n        if payment.billing_email:\n            datos_para_flow.update({\"email\": payment.billing_email})\n\n        datos_para_flow.update(**self._extra_data(payment.attrs))\n\n        try:\n            payment.attrs.datos_payment_create_flow = datos_para_flow\n            payment.save()\n        except Exception as e:  # noqa\n            # Dificil llegar ac\u00e1, y si llegamos es problema de django-payments\n            raise PaymentError(f\"Ocurri\u00f3 un error al guardar attrs.datos_flow: {e}\")  # noqa\n        datos_para_flow = dict(sorted(datos_para_flow.items()))\n        firma_datos = ClienteAPI.genera_firma(datos_para_flow, self.api_secret)\n        datos_para_flow.update({\"s\": firma_datos})\n\n        try:\n            pago_req = requests.post(f\"{self.api_endpoint}/payment/create\", data=datos_para_flow, timeout=5)\n            pago_req.raise_for_status()\n\n        except Exception as pe:\n            payment.change_status(PaymentStatus.ERROR, str(pe))\n            raise PaymentError(pe)\n        else:\n            pago = pago_req.json()\n            payment.transaction_id = pago[\"token\"]\n            payment.attrs.respuesta_flow = {\n                \"url\": pago[\"url\"],\n                \"token\": pago[\"token\"],\n                \"flowOrder\": pago[\"flowOrder\"],\n            }\n            payment.save()\n            payment.change_status(PaymentStatus.WAITING)\n\n        raise RedirectNeeded(f\"{pago['url']}?token={pago['token']}\")\n</code></pre>"},{"location":"api-flowprovider/#django_payments_chile.FlowProvider.FlowProvider.process_data","title":"<code>process_data(payment, request)</code>","text":"<p>Procesa los datos del pago recibidos desde Flow.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>request</code> <code>HttpRequest</code> <p>Objeto de solicitud HTTP de Django.</p> required <p>Returns:</p> Name Type Description <code>JsonResponse</code> <code>JsonResponse</code> <p>Respuesta JSON que indica el procesamiento de los datos del pago.</p> Source code in <code>django_payments_chile/FlowProvider.py</code> <pre><code>def process_data(self, payment, request) -&gt; JsonResponse:\n    \"\"\"\n    Procesa los datos del pago recibidos desde Flow.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n    Returns:\n        JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n    \"\"\"\n    if \"token\" not in request.POST:\n        return HttpResponseBadRequest(\"token no est\u00e1 en post\")\n\n    if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n        self.actualiza_estado(payment=payment)\n\n    return JsonResponse({\"status\": \"ok\"})\n</code></pre>"},{"location":"api-flowprovider/#django_payments_chile.FlowProvider.FlowProvider.refund","title":"<code>refund(payment, amount=None)</code>","text":"<p>Realiza un reembolso del pago. El seguimiendo se debe hacer directamente en Flow</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>amount</code> <code>int | None</code> <p>Monto a reembolsar (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Monto de reembolso solicitado.</p> <p>Raises:</p> Type Description <code>PaymentError</code> <p>Error al crear el reembolso.</p> Source code in <code>django_payments_chile/FlowProvider.py</code> <pre><code>def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n    \"\"\"\n    Realiza un reembolso del pago.\n    El seguimiendo se debe hacer directamente en Flow\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        amount (int | None): Monto a reembolsar (opcional).\n\n    Returns:\n        int: Monto de reembolso solicitado.\n\n    Raises:\n        PaymentError: Error al crear el reembolso.\n\n    \"\"\"\n    if payment.status != PaymentStatus.CONFIRMED:\n        raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n    to_refund = amount or payment.total\n\n    datos_reembolso = {\n        \"apiKey\": self.api_key,\n        \"refundCommerceOrder\": payment.token,\n        \"receiverEmail\": payment.billing_email,\n        \"amount\": to_refund,\n        \"urlCallBack\": payment.get_process_url(),\n        \"commerceTrxId\": payment.token,\n        \"flowTrxId\": payment.attrs.respuesta_flow[\"flowOrder\"],\n    }\n    try:\n        refun_req = requests.post(f\"{self.api_endpoint}/refund/create\", data=datos_reembolso, timeout=5)\n        refun_req.raise_for_status()\n    except Exception as pe:\n        raise PaymentError(pe)\n    else:\n        payment.attrs.solicitud_reembolso = refun_req.json()\n        payment.save()\n        payment.change_status(PaymentStatus.REFUNDED)\n        return to_refund\n</code></pre>"},{"location":"api-khipuprovider/","title":"KhipuProvider","text":""},{"location":"api-khipuprovider/#django_payments_chile.KhipuProvider.KhipuProvider","title":"<code>KhipuProvider</code>","text":"<p>               Bases: <code>BasicProvider</code></p> <p>KhipuProvider es una clase que proporciona integraci\u00f3n con Khipu para procesar pagos. Inicializa una instancia de KhipuProvider con la nueva llave de api introducida en v3</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>ApiKey entregada por Khipu.</p> required <code>**kwargs</code> <code>int</code> <p>Argumentos adicionales.</p> <code>{}</code> Source code in <code>django_payments_chile/KhipuProvider.py</code> <pre><code>class KhipuProvider(BasicProvider):\n    \"\"\"\n    KhipuProvider es una clase que proporciona integraci\u00f3n con Khipu para procesar pagos.\n    Inicializa una instancia de KhipuProvider con la nueva llave de api introducida en v3\n\n    Args:\n        api_key (str): ApiKey entregada por Khipu.\n        **kwargs: Argumentos adicionales.\n    \"\"\"\n\n    form_class = BasePaymentForm\n    api_endpoint: str = \"https://payment-api.khipu.com\"\n    api_key: str = None\n\n    def __init__(\n        self,\n        api_key: str,\n        api_endpoint: str,\n        **kwargs: int,\n    ):\n        super().__init__(**kwargs)\n        self.api_endpoint = api_endpoint\n        self.api_key = api_key\n\n    def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n        \"\"\"\n        Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Khipu.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            data (dict | None): Datos del formulario (opcional).\n\n        Returns:\n            Any: Formulario de pago redirigido a la p\u00e1gina de pago de Khipu.\n\n        Raises:\n            RedirectNeeded: Redirige a la p\u00e1gina de pago de Khipu.\n\n        \"\"\"\n        if not payment.transaction_id:\n            datos_para_khipu = {\n                \"transaction_id\": str(payment.token),\n                \"return_url\": payment.get_success_url(),\n                \"notify_url\": payment.get_process_url(),\n                \"subject\": payment.description,\n                \"amount\": Decimal(payment.total),\n                \"currency\": payment.currency,\n            }\n\n            if payment.billing_email:\n                datos_para_khipu.update({\"payer_email\": payment.billing_email})\n\n            datos_para_khipu.update(**self._extra_data(payment.attrs))\n\n            payment.attrs.datos_payment_create = datos_para_khipu\n            payment.save()\n\n            try:\n                pago_req = requests.post(\n                    f\"{self.api_endpoint}/v3/payments\",\n                    data=datos_para_khipu,\n                    timeout=5,\n                    headers=self.genera_headers(),\n                )\n                pago_req.raise_for_status()\n\n            except Exception as pe:\n                payment.change_status(PaymentStatus.ERROR, str(pe))\n                raise PaymentError(pe)\n            else:\n                pago = pago_req.json()\n                payment.transaction_id = pago[\"payment_id\"]\n                payment.attrs.respuesta_khipu = {\n                    \"payment_id\": pago[\"payment_id\"],\n                    \"payment_url\": pago[\"payment_url\"],\n                    \"simplified_transfer_url\": pago[\"simplified_transfer_url\"],\n                    \"transfer_url\": pago[\"transfer_url\"],\n                    \"app_url\": pago[\"app_url\"],\n                    \"ready_for_terminal\": pago[\"ready_for_terminal\"],\n                }\n                payment.save()\n                payment.change_status(PaymentStatus.WAITING)\n\n            raise RedirectNeeded(f\"{pago['payment_url']}\")\n\n    def genera_headers(self):\n        return {\"Content-Type\": \"application/json\", \"x-api-key\": self.api_key}\n\n    def process_data(self, payment, request) -&gt; JsonResponse:\n        \"\"\"\n        Procesa los datos del pago recibidos desde Khipu.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n        Returns:\n            JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n        \"\"\"\n        if \"transaction_id\" not in request.POST:\n            return HttpResponseBadRequest(\"transaction_id no est\u00e1 en post\")\n\n        if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n            self.actualiza_estado(payment=payment)\n\n        return JsonResponse({\"status\": \"ok\"})\n\n    def actualiza_estado(self, payment) -&gt; dict:\n        \"\"\"Actualiza el estado del pago con Khipu\n\n        Args:\n            payment (\"Payment): Objeto de pago Django Payments.\n\n        Returns:\n            dict: Diccionario con valores del objeto `PaymentStatus`.\n        \"\"\"\n        try:\n            estado_req = requests.get(\n                f\"{self.api_endpoint}/v3/payments/{payment.token}\",\n                timeout=5,\n                headers=self.genera_headers(),\n            )\n            estado_req.raise_for_status()\n\n        except Exception as e:\n            raise e\n        else:\n            status = estado_req.json()\n            if status[\"status\"] == \"done\" and status[\"status_detail\"] == \"normal\":\n                payment.change_status(PaymentStatus.CONFIRMED)\n            elif status[\"status_detail\"] in [\"rejected-by-payer\", \"reversed\", \"marked-as-abuse\"]:\n                payment.change_status(PaymentStatus.REJECTED)\n        return status\n\n    def _extra_data(self, attrs) -&gt; dict:\n        \"\"\"Busca los datos que son enviandos por django-payments y los saca del diccionario\n\n        Args:\n            attrs (\"PaymentAttributeProxy\"): Obtenido desde PaymentModel.extra_data\n\n        Returns:\n            dict: Diccionario con valores permitidos.\n        \"\"\"\n        try:\n            data = attrs.datos_extra\n        except AttributeError:\n            return {}\n\n        prohibidos = [\n            \"amount\",\n            \"subject\",\n            \"currency\",\n        ]\n        for valor in prohibidos:\n            if valor in data:\n                del data[valor]\n\n        return data\n\n    def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n        \"\"\"\n        Realiza un reembolso del pago.\n        El seguimiendo se debe hacer directamente en Khipu\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            amount (int | None): Monto a reembolsar (opcional).\n\n        Returns:\n            int: Monto de reembolso solicitado.\n\n        Raises:\n            PaymentError: Error al crear el reembolso.\n\n        \"\"\"\n        if payment.status != PaymentStatus.CONFIRMED:\n            raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n        to_refund = amount or payment.total\n\n        datos_reembolso = {\"amount\": to_refund}\n        try:\n            refun_req = requests.post(\n                f\"{self.api_endpoint}/v3/payments/{payment.token}/refunds\",\n                data=datos_reembolso,\n                timeout=5,\n                headers=self.genera_headers(),\n            )\n            refun_req.raise_for_status()\n        except Exception as pe:\n            raise PaymentError(pe)\n        else:\n            payment.attrs.solicitud_reembolso = refun_req.json()\n            payment.save()\n            payment.change_status(PaymentStatus.REFUNDED)\n            return to_refund\n</code></pre>"},{"location":"api-khipuprovider/#django_payments_chile.KhipuProvider.KhipuProvider.actualiza_estado","title":"<code>actualiza_estado(payment)</code>","text":"<p>Actualiza el estado del pago con Khipu</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>\"Payment</code> <p>Objeto de pago Django Payments.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Diccionario con valores del objeto <code>PaymentStatus</code>.</p> Source code in <code>django_payments_chile/KhipuProvider.py</code> <pre><code>def actualiza_estado(self, payment) -&gt; dict:\n    \"\"\"Actualiza el estado del pago con Khipu\n\n    Args:\n        payment (\"Payment): Objeto de pago Django Payments.\n\n    Returns:\n        dict: Diccionario con valores del objeto `PaymentStatus`.\n    \"\"\"\n    try:\n        estado_req = requests.get(\n            f\"{self.api_endpoint}/v3/payments/{payment.token}\",\n            timeout=5,\n            headers=self.genera_headers(),\n        )\n        estado_req.raise_for_status()\n\n    except Exception as e:\n        raise e\n    else:\n        status = estado_req.json()\n        if status[\"status\"] == \"done\" and status[\"status_detail\"] == \"normal\":\n            payment.change_status(PaymentStatus.CONFIRMED)\n        elif status[\"status_detail\"] in [\"rejected-by-payer\", \"reversed\", \"marked-as-abuse\"]:\n            payment.change_status(PaymentStatus.REJECTED)\n    return status\n</code></pre>"},{"location":"api-khipuprovider/#django_payments_chile.KhipuProvider.KhipuProvider.get_form","title":"<code>get_form(payment, data=None)</code>","text":"<p>Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Khipu.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>data</code> <code>dict | None</code> <p>Datos del formulario (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Formulario de pago redirigido a la p\u00e1gina de pago de Khipu.</p> <p>Raises:</p> Type Description <code>RedirectNeeded</code> <p>Redirige a la p\u00e1gina de pago de Khipu.</p> Source code in <code>django_payments_chile/KhipuProvider.py</code> <pre><code>def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n    \"\"\"\n    Genera el formulario de pago para redirigir a la p\u00e1gina de pago de Khipu.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        data (dict | None): Datos del formulario (opcional).\n\n    Returns:\n        Any: Formulario de pago redirigido a la p\u00e1gina de pago de Khipu.\n\n    Raises:\n        RedirectNeeded: Redirige a la p\u00e1gina de pago de Khipu.\n\n    \"\"\"\n    if not payment.transaction_id:\n        datos_para_khipu = {\n            \"transaction_id\": str(payment.token),\n            \"return_url\": payment.get_success_url(),\n            \"notify_url\": payment.get_process_url(),\n            \"subject\": payment.description,\n            \"amount\": Decimal(payment.total),\n            \"currency\": payment.currency,\n        }\n\n        if payment.billing_email:\n            datos_para_khipu.update({\"payer_email\": payment.billing_email})\n\n        datos_para_khipu.update(**self._extra_data(payment.attrs))\n\n        payment.attrs.datos_payment_create = datos_para_khipu\n        payment.save()\n\n        try:\n            pago_req = requests.post(\n                f\"{self.api_endpoint}/v3/payments\",\n                data=datos_para_khipu,\n                timeout=5,\n                headers=self.genera_headers(),\n            )\n            pago_req.raise_for_status()\n\n        except Exception as pe:\n            payment.change_status(PaymentStatus.ERROR, str(pe))\n            raise PaymentError(pe)\n        else:\n            pago = pago_req.json()\n            payment.transaction_id = pago[\"payment_id\"]\n            payment.attrs.respuesta_khipu = {\n                \"payment_id\": pago[\"payment_id\"],\n                \"payment_url\": pago[\"payment_url\"],\n                \"simplified_transfer_url\": pago[\"simplified_transfer_url\"],\n                \"transfer_url\": pago[\"transfer_url\"],\n                \"app_url\": pago[\"app_url\"],\n                \"ready_for_terminal\": pago[\"ready_for_terminal\"],\n            }\n            payment.save()\n            payment.change_status(PaymentStatus.WAITING)\n\n        raise RedirectNeeded(f\"{pago['payment_url']}\")\n</code></pre>"},{"location":"api-khipuprovider/#django_payments_chile.KhipuProvider.KhipuProvider.process_data","title":"<code>process_data(payment, request)</code>","text":"<p>Procesa los datos del pago recibidos desde Khipu.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>request</code> <code>HttpRequest</code> <p>Objeto de solicitud HTTP de Django.</p> required <p>Returns:</p> Name Type Description <code>JsonResponse</code> <code>JsonResponse</code> <p>Respuesta JSON que indica el procesamiento de los datos del pago.</p> Source code in <code>django_payments_chile/KhipuProvider.py</code> <pre><code>def process_data(self, payment, request) -&gt; JsonResponse:\n    \"\"\"\n    Procesa los datos del pago recibidos desde Khipu.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n    Returns:\n        JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n    \"\"\"\n    if \"transaction_id\" not in request.POST:\n        return HttpResponseBadRequest(\"transaction_id no est\u00e1 en post\")\n\n    if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n        self.actualiza_estado(payment=payment)\n\n    return JsonResponse({\"status\": \"ok\"})\n</code></pre>"},{"location":"api-khipuprovider/#django_payments_chile.KhipuProvider.KhipuProvider.refund","title":"<code>refund(payment, amount=None)</code>","text":"<p>Realiza un reembolso del pago. El seguimiendo se debe hacer directamente en Khipu</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>amount</code> <code>int | None</code> <p>Monto a reembolsar (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Monto de reembolso solicitado.</p> <p>Raises:</p> Type Description <code>PaymentError</code> <p>Error al crear el reembolso.</p> Source code in <code>django_payments_chile/KhipuProvider.py</code> <pre><code>def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n    \"\"\"\n    Realiza un reembolso del pago.\n    El seguimiendo se debe hacer directamente en Khipu\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        amount (int | None): Monto a reembolsar (opcional).\n\n    Returns:\n        int: Monto de reembolso solicitado.\n\n    Raises:\n        PaymentError: Error al crear el reembolso.\n\n    \"\"\"\n    if payment.status != PaymentStatus.CONFIRMED:\n        raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n    to_refund = amount or payment.total\n\n    datos_reembolso = {\"amount\": to_refund}\n    try:\n        refun_req = requests.post(\n            f\"{self.api_endpoint}/v3/payments/{payment.token}/refunds\",\n            data=datos_reembolso,\n            timeout=5,\n            headers=self.genera_headers(),\n        )\n        refun_req.raise_for_status()\n    except Exception as pe:\n        raise PaymentError(pe)\n    else:\n        payment.attrs.solicitud_reembolso = refun_req.json()\n        payment.save()\n        payment.change_status(PaymentStatus.REFUNDED)\n        return to_refund\n</code></pre>"},{"location":"api-webpayprovider/","title":"WebpayProvider","text":""},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider","title":"<code>WebpayProvider</code>","text":"<p>               Bases: <code>BasicProvider</code></p> <p>WebpayProvider es una clase que proporciona integraci\u00f3n con Transbank para procesar pagos. Inicializa una instancia de WebpayProvider con el key y el secreto de Transbank.</p> <p>Parameters:</p> Name Type Description Default <code>api_key_id</code> <code>str</code> <p>ApiKey entregada por Transbank.</p> required <code>api_key_secret</code> <code>str</code> <p>ApiSecret entregada por Transbank.</p> required <code>api_endpoint</code> <code>str</code> <p>Ambiente Transbank, puede ser \"produccion\" o \"integracion\" (Valor por defecto: produccion)</p> <code>'produccion'</code> <code>**kwargs</code> <code>int</code> <p>Argumentos adicionales.</p> <code>{}</code> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>class WebpayProvider(BasicProvider):\n    \"\"\"\n    WebpayProvider es una clase que proporciona integraci\u00f3n con Transbank para procesar pagos.\n    Inicializa una instancia de WebpayProvider con el key y el secreto de Transbank.\n\n    Args:\n        api_key_id (str): ApiKey entregada por Transbank.\n        api_key_secret (str): ApiSecret entregada por Transbank.\n        api_endpoint (str): Ambiente Transbank, puede ser \"produccion\" o \"integracion\" (Valor por defecto: produccion)\n        **kwargs: Argumentos adicionales.\n    \"\"\"\n\n    form_class = BasePaymentForm\n    api_endpoint: str\n    api_key_id: str = None\n    api_key_secret: str = None\n\n    def __init__(\n        self,\n        api_key_id: str,\n        api_key_secret: str,\n        api_endpoint: str = \"produccion\",\n        **kwargs: int,\n    ):\n        super().__init__(**kwargs)\n        self.api_endpoint = api_endpoint\n        self.api_key_id = api_key_id\n        self.api_key_secret = api_key_secret\n        if self.api_endpoint == \"produccion\":\n            self.api_endpoint = \"https://webpay3g.transbank.cl/\"\n        elif self.api_endpoint == \"integracion\":\n            self.api_endpoint = \"https://webpay3gint.transbank.cl/\"\n\n    def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n        \"\"\"\n        Genera el formulario de pago para redirigir a la p\u00e1gina de pago.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            data (dict | None): Datos del formulario (opcional).\n\n        Returns:\n            Any: Formulario de pago redirigido a la p\u00e1gina de pago.\n\n        Raises:\n            RedirectNeeded: Redirige a la p\u00e1gina de pago.\n\n        \"\"\"\n        if not payment.transaction_id:\n            datos_para_tbk = {\n                \"buy_order\": str(payment.token),\n                \"session\": str(payment.token),\n                \"return_url\": payment.get_process_url(),\n                \"amount\": int(payment.total),\n            }\n\n            try:\n                pago_req = requests.post(\n                    f\"{self.api_endpoint} /rswebpaytransaction/api/webpay/v1.2/transactions\",\n                    data=datos_para_tbk,\n                    timeout=5,\n                )\n                pago_req.raise_for_status()\n\n            except Exception as pe:\n                payment.change_status(PaymentStatus.ERROR, str(pe))\n                raise PaymentError(pe)\n            else:\n                pago = pago_req.json()\n                payment.transaction_id = pago[\"token\"]\n                payment.attrs.request_tbk = datos_para_tbk\n                payment.attrs.respuesta_tbk = pago\n                payment.save()\n                payment.change_status(PaymentStatus.PREAUTH)\n\n            raise RedirectNeeded(f\"{pago['url']}?token_ws={pago['token']}\")\n\n    def genera_headers(self):\n        return {\n            \"Content-Type\": \"application/json\",\n            \"Tbk-Api-Key-Id\": self.api_key_id,\n            \"Tbk-Api-Key-Secret\": self.api_key_secret,\n        }\n\n    def process_data(self, payment, request) -&gt; JsonResponse:\n        \"\"\"\n        Procesa la captura del pago\n        Usuario deberia volver ac\u00e1 y luego a la pagina de muestra de informacion.\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n        Returns:\n            JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n        \"\"\"\n\n        if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n            self.commit(self.get_token_from_request(None, payment), payment)\n\n    def get_token_from_request(self, payment, request) -&gt; str:\n        \"\"\"Return payment token from provider request.\"\"\"\n\n        try:\n            return request.POST[\"token_ws\"] or request.GET[\"token_ws\"]\n        except Exception as e:\n            raise PaymentError(\n                code=400,\n                message=\"token_ws is not present\",\n            ) from e\n\n    def actualiza_estado(self, payment) -&gt; dict:\n        \"\"\"Actualiza el estado del pago con Flow\n\n        Args:\n            payment (\"Payment): Objeto de pago Django Payments.\n\n        Returns:\n            dict: Diccionario con valores del objeto `PaymentStatus`.\n        \"\"\"\n\n        try:\n            status_req = requests.put(\n                f\"{self.api_endpoint}/rswebpaytransaction/api/webpay/v1.2/transactions/{payment.token}\",\n                timeout=5,\n                headers=self.genera_headers(),\n            )\n            status_req.raise_for_status()\n        except Exception as e:\n            raise e\n        else:\n            status = status_req.json()\n            payment.attrs.status_response = status\n            payment.save()\n\n            if status[\"response_code\"] == 0:\n                payment.change_status(PaymentStatus.CONFIRMED)\n                return PaymentStatus.CONFIRMED\n            else:\n                payment.change_status(PaymentStatus.REJECTED)\n                return PaymentStatus.REJECTED\n\n    def commit(self, token, payment):\n        \"\"\"Se debe llamar al procesar el retorno\"\"\"\n        try:\n            commit_req = requests.put(\n                f\"{self.api_endpoint}/rswebpaytransaction/api/webpay/v1.2/transactions/{token}\",\n                timeout=5,\n                headers=self.genera_headers(),\n            )\n            commit_req.raise_for_status()\n        except Exception as e:\n            raise e\n        else:\n            commit = commit_req.json()\n            commit[\"vci_str\"] = self.agrega_info_error(\"vci\", commit[\"vci\"])\n            commit[\"payment_type_code_str\"] = self.agrega_info_error(\"pago\", commit[\"payment_type_code\"])\n            payment.attrs.commit_response = commit\n            payment.save()\n            if commit[\"status\"] == \"AUTHORIZED\" and commit[\"response_code\"] == 0:\n                raise RedirectNeeded(\"success\")\n            else:\n                raise RedirectNeeded(\"error\")\n\n    def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n        \"\"\"\n        Realiza un reembolso del pago.\n        El seguimiendo se debe hacer directamente en Flow\n\n        Args:\n            payment (\"Payment\"): Objeto de pago Django Payments.\n            amount (int | None): Monto a reembolsar (opcional).\n\n        Returns:\n            int: Monto de reembolso solicitado.\n\n        Raises:\n            PaymentError: Error al crear el reembolso.\n\n        \"\"\"\n        if payment.status != PaymentStatus.CONFIRMED:\n            raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n        refund_data = {\"amount\": amount or payment.total}\n        try:\n            refund_req = requests.put(\n                f\"{self.api_endpoint}/rswebpaytransaction/api/webpay/v1.2/transactions/{payment.token}/refunds\",\n                timeout=5,\n                headers=self.genera_headers(),\n                data=refund_data,\n            )\n            refund_req.raise_for_status()\n        except Exception as e:\n            raise e\n        else:\n            refund = refund_req.json()\n            refund[\"response_code_str\"] = self.agrega_info_error(\"refund\", refund[\"response_code\"])\n            payment.attrs.refund_response = refund\n            payment.save()\n\n            if refund[\"type\"] == \"REVERSED\":\n                payment.change_status(PaymentStatus.REFUNDED)\n                return payment.total\n            elif refund[\"type\"] == \"NULLIFIED\" and refund[\"response_code\"] == 0:\n                payment.change_status(PaymentStatus.REFUNDED)\n                return refund[\"nullified_amount\"]\n\n    def agrega_info_error(self, tipo, codigo):\n        if tipo == \"vci\":\n            return vci_status.get(codigo, None)\n        elif tipo == \"pago\":\n            return tipo_de_pagos.get(codigo, None)\n        elif tipo == \"rechazo_l1\":\n            return codigos_rechazo_nivel_1.get(codigo, None)\n        elif tipo == \"refund\":\n            return codigo_rechazo_refund.get(codigo, None)\n        else:\n            return None\n</code></pre>"},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider.actualiza_estado","title":"<code>actualiza_estado(payment)</code>","text":"<p>Actualiza el estado del pago con Flow</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>\"Payment</code> <p>Objeto de pago Django Payments.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Diccionario con valores del objeto <code>PaymentStatus</code>.</p> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>def actualiza_estado(self, payment) -&gt; dict:\n    \"\"\"Actualiza el estado del pago con Flow\n\n    Args:\n        payment (\"Payment): Objeto de pago Django Payments.\n\n    Returns:\n        dict: Diccionario con valores del objeto `PaymentStatus`.\n    \"\"\"\n\n    try:\n        status_req = requests.put(\n            f\"{self.api_endpoint}/rswebpaytransaction/api/webpay/v1.2/transactions/{payment.token}\",\n            timeout=5,\n            headers=self.genera_headers(),\n        )\n        status_req.raise_for_status()\n    except Exception as e:\n        raise e\n    else:\n        status = status_req.json()\n        payment.attrs.status_response = status\n        payment.save()\n\n        if status[\"response_code\"] == 0:\n            payment.change_status(PaymentStatus.CONFIRMED)\n            return PaymentStatus.CONFIRMED\n        else:\n            payment.change_status(PaymentStatus.REJECTED)\n            return PaymentStatus.REJECTED\n</code></pre>"},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider.commit","title":"<code>commit(token, payment)</code>","text":"<p>Se debe llamar al procesar el retorno</p> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>def commit(self, token, payment):\n    \"\"\"Se debe llamar al procesar el retorno\"\"\"\n    try:\n        commit_req = requests.put(\n            f\"{self.api_endpoint}/rswebpaytransaction/api/webpay/v1.2/transactions/{token}\",\n            timeout=5,\n            headers=self.genera_headers(),\n        )\n        commit_req.raise_for_status()\n    except Exception as e:\n        raise e\n    else:\n        commit = commit_req.json()\n        commit[\"vci_str\"] = self.agrega_info_error(\"vci\", commit[\"vci\"])\n        commit[\"payment_type_code_str\"] = self.agrega_info_error(\"pago\", commit[\"payment_type_code\"])\n        payment.attrs.commit_response = commit\n        payment.save()\n        if commit[\"status\"] == \"AUTHORIZED\" and commit[\"response_code\"] == 0:\n            raise RedirectNeeded(\"success\")\n        else:\n            raise RedirectNeeded(\"error\")\n</code></pre>"},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider.get_form","title":"<code>get_form(payment, data=None)</code>","text":"<p>Genera el formulario de pago para redirigir a la p\u00e1gina de pago.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>data</code> <code>dict | None</code> <p>Datos del formulario (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Formulario de pago redirigido a la p\u00e1gina de pago.</p> <p>Raises:</p> Type Description <code>RedirectNeeded</code> <p>Redirige a la p\u00e1gina de pago.</p> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>def get_form(self, payment, data: Optional[dict] = None) -&gt; Any:\n    \"\"\"\n    Genera el formulario de pago para redirigir a la p\u00e1gina de pago.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        data (dict | None): Datos del formulario (opcional).\n\n    Returns:\n        Any: Formulario de pago redirigido a la p\u00e1gina de pago.\n\n    Raises:\n        RedirectNeeded: Redirige a la p\u00e1gina de pago.\n\n    \"\"\"\n    if not payment.transaction_id:\n        datos_para_tbk = {\n            \"buy_order\": str(payment.token),\n            \"session\": str(payment.token),\n            \"return_url\": payment.get_process_url(),\n            \"amount\": int(payment.total),\n        }\n\n        try:\n            pago_req = requests.post(\n                f\"{self.api_endpoint} /rswebpaytransaction/api/webpay/v1.2/transactions\",\n                data=datos_para_tbk,\n                timeout=5,\n            )\n            pago_req.raise_for_status()\n\n        except Exception as pe:\n            payment.change_status(PaymentStatus.ERROR, str(pe))\n            raise PaymentError(pe)\n        else:\n            pago = pago_req.json()\n            payment.transaction_id = pago[\"token\"]\n            payment.attrs.request_tbk = datos_para_tbk\n            payment.attrs.respuesta_tbk = pago\n            payment.save()\n            payment.change_status(PaymentStatus.PREAUTH)\n\n        raise RedirectNeeded(f\"{pago['url']}?token_ws={pago['token']}\")\n</code></pre>"},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider.get_token_from_request","title":"<code>get_token_from_request(payment, request)</code>","text":"<p>Return payment token from provider request.</p> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>def get_token_from_request(self, payment, request) -&gt; str:\n    \"\"\"Return payment token from provider request.\"\"\"\n\n    try:\n        return request.POST[\"token_ws\"] or request.GET[\"token_ws\"]\n    except Exception as e:\n        raise PaymentError(\n            code=400,\n            message=\"token_ws is not present\",\n        ) from e\n</code></pre>"},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider.process_data","title":"<code>process_data(payment, request)</code>","text":"<p>Procesa la captura del pago Usuario deberia volver ac\u00e1 y luego a la pagina de muestra de informacion.</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>request</code> <code>HttpRequest</code> <p>Objeto de solicitud HTTP de Django.</p> required <p>Returns:</p> Name Type Description <code>JsonResponse</code> <code>JsonResponse</code> <p>Respuesta JSON que indica el procesamiento de los datos del pago.</p> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>def process_data(self, payment, request) -&gt; JsonResponse:\n    \"\"\"\n    Procesa la captura del pago\n    Usuario deberia volver ac\u00e1 y luego a la pagina de muestra de informacion.\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        request (\"HttpRequest\"): Objeto de solicitud HTTP de Django.\n\n    Returns:\n        JsonResponse: Respuesta JSON que indica el procesamiento de los datos del pago.\n\n    \"\"\"\n\n    if payment.status in [PaymentStatus.WAITING, PaymentStatus.PREAUTH]:\n        self.commit(self.get_token_from_request(None, payment), payment)\n</code></pre>"},{"location":"api-webpayprovider/#django_payments_chile.WebpayProvider.WebpayProvider.refund","title":"<code>refund(payment, amount=None)</code>","text":"<p>Realiza un reembolso del pago. El seguimiendo se debe hacer directamente en Flow</p> <p>Parameters:</p> Name Type Description Default <code>payment</code> <code>Payment</code> <p>Objeto de pago Django Payments.</p> required <code>amount</code> <code>int | None</code> <p>Monto a reembolsar (opcional).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Monto de reembolso solicitado.</p> <p>Raises:</p> Type Description <code>PaymentError</code> <p>Error al crear el reembolso.</p> Source code in <code>django_payments_chile/WebpayProvider.py</code> <pre><code>def refund(self, payment, amount: Optional[int] = None) -&gt; int:\n    \"\"\"\n    Realiza un reembolso del pago.\n    El seguimiendo se debe hacer directamente en Flow\n\n    Args:\n        payment (\"Payment\"): Objeto de pago Django Payments.\n        amount (int | None): Monto a reembolsar (opcional).\n\n    Returns:\n        int: Monto de reembolso solicitado.\n\n    Raises:\n        PaymentError: Error al crear el reembolso.\n\n    \"\"\"\n    if payment.status != PaymentStatus.CONFIRMED:\n        raise PaymentError(\"El pago debe estar confirmado para reversarse.\")\n\n    refund_data = {\"amount\": amount or payment.total}\n    try:\n        refund_req = requests.put(\n            f\"{self.api_endpoint}/rswebpaytransaction/api/webpay/v1.2/transactions/{payment.token}/refunds\",\n            timeout=5,\n            headers=self.genera_headers(),\n            data=refund_data,\n        )\n        refund_req.raise_for_status()\n    except Exception as e:\n        raise e\n    else:\n        refund = refund_req.json()\n        refund[\"response_code_str\"] = self.agrega_info_error(\"refund\", refund[\"response_code\"])\n        payment.attrs.refund_response = refund\n        payment.save()\n\n        if refund[\"type\"] == \"REVERSED\":\n            payment.change_status(PaymentStatus.REFUNDED)\n            return payment.total\n        elif refund[\"type\"] == \"NULLIFIED\" and refund[\"response_code\"] == 0:\n            payment.change_status(PaymentStatus.REFUNDED)\n            return refund[\"nullified_amount\"]\n</code></pre>"},{"location":"api/","title":"API de django-payments-chile","text":"<p>Este documento proporciona una visi\u00f3n general de los diferentes proveedores de pago disponibles en django-payments-chile. Cada proveedor tiene su propia implementaci\u00f3n y configuraci\u00f3n espec\u00edfica.</p> <p>Para obtener detalles sobre cada proveedor, consulte los siguientes enlaces:</p> <ul> <li>FlowProvider</li> <li>KhipuProvider</li> <li>KlapProvider</li> <li>KushkiProvider</li> <li>PagofacilProvider</li> <li>PaykuProvider</li> <li>WebpayProvider</li> </ul>"},{"location":"contributing/","title":"Gu\u00eda de Colaboraci\u00f3n para django-payments-chile","text":"<p>\u00a1Gracias por tu inter\u00e9s en colaborar con django-payments-chile! Este documento te guiar\u00e1 a trav\u00e9s del proceso de contribuci\u00f3n al proyecto.</p>"},{"location":"contributing/#formas-de-colaborar","title":"Formas de Colaborar","text":"<ol> <li>Reportar bugs: Si encuentras un error, por favor crea un issue en GitHub describiendo el problema.</li> <li>Sugerir mejoras: Las ideas para nuevas caracter\u00edsticas son bienvenidas. Crea un issue para discutirlas.</li> <li>Mejorar la documentaci\u00f3n: Ay\u00fadanos a mantener la documentaci\u00f3n clara y actualizada.</li> <li>Contribuir con c\u00f3digo: Sigue las instrucciones a continuaci\u00f3n para enviar tus contribuciones de c\u00f3digo.</li> </ol>"},{"location":"contributing/#proceso-de-contribucion","title":"Proceso de Contribuci\u00f3n","text":"<ol> <li>Fork el repositorio en GitHub.</li> <li>Clona tu fork a tu m\u00e1quina local.</li> <li>Crea una nueva rama para tu contribuci\u00f3n.</li> <li>Realiza tus cambios y aseg\u00farate de seguir las gu\u00edas de estilo del proyecto.</li> <li>Prueba tus cambios (ver secci\u00f3n de Pruebas).</li> <li>Haz commit de tus cambios con mensajes claros y descriptivos.</li> <li>Push tus cambios a tu fork en GitHub.</li> <li>Crea un Pull Request desde tu fork al repositorio principal.</li> </ol>"},{"location":"contributing/#clonar-el-repositorio","title":"Clonar el Repositorio","text":"<p>Puedes clonar el repositorio de dos maneras:</p>"},{"location":"contributing/#usando-git","title":"Usando Git","text":"<pre><code>git clone https://github.com/mariofix/django-payments-chile.git\ncd django-payments-chile\n</code></pre>"},{"location":"contributing/#usando-github-cli","title":"Usando GitHub CLI","text":"<pre><code>gh repo clone mariofix/django-payments-chile\ncd django-payments-chile\n</code></pre>"},{"location":"contributing/#configuracion-del-entorno-de-desarrollo","title":"Configuraci\u00f3n del Entorno de Desarrollo","text":"<ol> <li>Aseg\u00farate de tener Python 3.9+ y Poetry instalados.</li> <li>Instala las dependencias del proyecto:</li> </ol> <pre><code>poetry install --with dev\n</code></pre>"},{"location":"contributing/#pruebas-cobertura-y-estructura-del-codigo","title":"Pruebas, Cobertura y Estructura del C\u00f3digo","text":"<p>Antes de enviar tu Pull Request, aseg\u00farate de que tu c\u00f3digo pase todas las pruebas y siga las convenciones del proyecto.</p>"},{"location":"contributing/#ejecutar-pruebas","title":"Ejecutar Pruebas","text":"<pre><code>poetry run pytest\n</code></pre>"},{"location":"contributing/#verificar-cobertura-de-codigo","title":"Verificar Cobertura de C\u00f3digo","text":"<pre><code>poetry run coverage run -m pytest\npoetry run coverage report\n</code></pre>"},{"location":"contributing/#verificar-estructura-y-estilo-del-codigo","title":"Verificar Estructura y Estilo del C\u00f3digo","text":"<p>Utilizamos pre-commit para mantener la consistencia del c\u00f3digo:</p> <pre><code>poetry run pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#guias-de-estilo","title":"Gu\u00edas de Estilo","text":"<ul> <li>Sigue la gu\u00eda de estilo PEP 8 para el c\u00f3digo Python.</li> <li>Utiliza docstrings para documentar funciones, clases y m\u00f3dulos.</li> <li>Mant\u00e9n el c\u00f3digo limpio y bien comentado.</li> </ul>"},{"location":"contributing/#proceso-de-revision","title":"Proceso de Revisi\u00f3n","text":"<ol> <li>Un mantenedor revisar\u00e1 tu Pull Request.</li> <li>Puede que se te pida realizar cambios o aclaraciones.</li> <li>Una vez aprobado, tu c\u00f3digo ser\u00e1 fusionado en la rama principal.</li> </ol>"},{"location":"contributing/#informes-de-calidad-de-codigo","title":"Informes de Calidad de C\u00f3digo","text":"<p>Al realizar tu Pull Request, recibir\u00e1s un informe de Codacy que indicar\u00e1 si tu c\u00f3digo cumple con los est\u00e1ndares de calidad del proyecto. Aseg\u00farate de abordar cualquier problema se\u00f1alado en este informe.</p>"},{"location":"contributing/#licencia","title":"Licencia","text":"<p>Al contribuir a este proyecto, aceptas que tus contribuciones se licenciar\u00e1n bajo la licencia MIT del proyecto. Aseg\u00farate de que cualquier nuevo archivo incluya el encabezado de licencia apropiado.</p>"},{"location":"contributing/#obtener-ayuda","title":"Obtener Ayuda","text":"<p>Si tienes preguntas o necesitas ayuda, no dudes en crear un issue en GitHub.</p> <p>\u00a1Gracias por tu contribuci\u00f3n a django-payments-chile!</p>"},{"location":"guia-django/","title":"Gu\u00eda para configurar Django con django-payments y django-payments-chile","text":"<p>Esta gu\u00eda est\u00e1 dise\u00f1ada para ayudarte a integrar django-payments y django-payments-chile en una aplicaci\u00f3n Django ya funcional que no necesariamente tiene un modulo de pago.</p>"},{"location":"guia-django/#instalacion-de-dependencias","title":"Instalaci\u00f3n de dependencias","text":"<p>Dentro de tu proyecto Django, debes usar el administrador de paquetes que mas de guste, esta aplicacion se encuenta publicada en PyPi.</p> <p>Con <code>pip</code>:</p> <pre><code>pip install django-payments django-payments-chile\n</code></pre> <p>Con <code>poetry</code>:</p> <pre><code>poetry add django-payments django-payments-chile\n</code></pre>"},{"location":"guia-django/#crear-una-aplicacion-para-pagos","title":"Crear una aplicaci\u00f3n para pagos","text":"<p>Luego utiliza el siguiente comando para crear la aplicaci\u00f3n de pagos:</p> <pre><code>python manage.py startapp pagos\n</code></pre> <p>La aplicaci\u00f3n <code>pagos</code> se utilizar\u00e1 para integrar y extender las funcionalidades de django-payments y django-payments-chile.</p>"},{"location":"guia-django/#configuracion-de-django-payments","title":"Configuraci\u00f3n de Django-Payments","text":""},{"location":"guia-django/#1-agregar-aplicaciones-al-archivo-settingspy","title":"1. Agregar aplicaciones al archivo <code>settings.py</code>","text":"<p>En el archivo de configuraci\u00f3n principal de tu proyecto Django, agrega las aplicaciones necesarias:</p> <pre><code>INSTALLED_APPS = [\n    ...\n    \"payments\",\n    \"pagos\",\n    ...\n]\n</code></pre>"},{"location":"guia-django/#2-configurar-los-parametros-necesarios","title":"2. Configurar los par\u00e1metros necesarios","text":"<p>Agrega las configuraciones clave en tu archivo <code>settings.py</code>:</p> <pre><code>PAYMENT_HOST = 'tu-tienda.cl'  # Cambia esto por el dominio de tu aplicaci\u00f3n\nPAYMENT_USES_SSL = True  # Es recomendable habilitar TLS para mayor seguridad\nPAYMENT_MODEL = 'pagos.models.Payment'  # Modelo extendido para pagos\n\nPAYMENT_VARIANTS = {\n    \"klap\": (\n        \"django_payments_chile.KlapProvider\",\n        {\n            \"api_key\": \"KLAP_KEY\",\n            \"api_secret\": \"secret\",\n        }\n    )\n}\n</code></pre>"},{"location":"guia-django/#3-configurar-urls","title":"3. Configurar URLs","text":"<p>Incluye las rutas de django-payments en el archivo de rutas principales de tu proyecto o en un archivo espec\u00edfico como <code>pagos/urls.py</code>:</p> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    ...\n    path('payments/', include('payments.urls')),\n    ...\n]\n</code></pre>"},{"location":"guia-django/#crear-un-modelo-extendido-para-django-payments","title":"Crear un modelo extendido para Django-Payments","text":"<p>Django-Payments requiere un modelo que extienda la clase base <code>BasePayment</code>.</p> <pre><code>from decimal import Decimal\nfrom django.urls import reverse\nfrom payments import PurchasedItem\nfrom payments.models import BasePayment\n\nclass Payment(BasePayment):\n    def get_failure_url(self) -&gt; str:\n        return reverse('payment_failure', kwargs={'pk': self.pk})\n\n    def get_success_url(self) -&gt; str:\n        return reverse('payment_success', kwargs={'pk': self.pk})\n</code></pre> <p>Este modelo maneja las URLs para redirigir a los usuarios despu\u00e9s de un pago exitoso o fallido utilizando rutas nombradas en lugar de construir URLs manualmente.</p>"},{"location":"guia-django/#crear-vistas-para-manejar-exito-y-fallos-de-pago","title":"Crear vistas para manejar \u00e9xito y fallos de pago","text":"<p>Es necesario crear vistas que gestionen las respuestas despu\u00e9s de un pago exitoso o fallido. Estas vistas se pueden definir dentro de la aplicaci\u00f3n <code>pagos</code>:</p>"},{"location":"guia-django/#ejemplo-de-vistas","title":"Ejemplo de vistas","text":"<pre><code>from django.http import HttpResponse\nfrom django.shortcuts import get_object_or_404\nfrom pagos.models import Payment\n\ndef payment_success(request, pk):\n    pago = get_object_or_404(Payment, pk=pk)\n    return HttpResponse(f\"El pago con ID {pago.pk} fue exitoso. Gracias por tu compra.\")\n\ndef payment_failure(request, pk):\n    pago = get_object_or_404(Payment, pk=pk)\n    return HttpResponse(f\"El pago con ID {pago.pk} no pudo completarse. Por favor, intenta nuevamente.\")\n</code></pre>"},{"location":"guia-django/#configurar-las-rutas-para-las-vistas","title":"Configurar las rutas para las vistas","text":"<p>Agrega las rutas correspondientes en el archivo <code>pagos/urls.py</code>:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('success/&lt;int:pk&gt;/', views.payment_success, name='payment_success'),\n    path('failure/&lt;int:pk&gt;/', views.payment_failure, name='payment_failure'),\n]\n</code></pre> <p>Finalmente, incluye estas rutas en las rutas principales del proyecto:</p> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    ...\n    path('pagos/', include('pagos.urls')),\n    ...\n]\n</code></pre> <p>Con esta configuraci\u00f3n, tu aplicaci\u00f3n estar\u00e1 lista para manejar los flujos de \u00e9xito y fallo en los pagos, integrando django-payments y django-payments-chile de manera efectiva.</p>"},{"location":"guia-introduccion/","title":"Guias de Uso","text":"<p>Ac\u00e1 encontraras algunos implementaciones para que puedas ayudarte.</p> <ul> <li>Tengo una aplicacion en Django y quisiera instalar django-payments y django-payments-chile para configurar Klap.</li> <li>Ya tengo una tienda en Django con django-payments y quisiera agregar django-payments-chile para agregar Flow a mis opciones de pago.</li> <li>Tengo una tienda en Shopify y quisiera saber de que se trata esto.</li> </ul>"},{"location":"guia-tienda/","title":"Guia Tienda","text":""},{"location":"providers/","title":"Proveedores de Django-Payments-Chile","text":"<p>Django-Payments utiliza el concepto de proveedores y variantes para establecer conexiones con diferentes pasarelas de pago. Este documento describe la instalaci\u00f3n y configuraci\u00f3n de los proveedores disponibles en el proyecto django-payments-chile.</p>"},{"location":"providers/#instalacion-general","title":"Instalaci\u00f3n general","text":"<p>Para instalar todos los proveedores, ejecuta:</p> <pre><code>pip install django-payments-chile\n</code></pre>"},{"location":"providers/#proveedores-disponibles","title":"Proveedores disponibles","text":""},{"location":"providers/#flow","title":"Flow","text":"<p>No es necesario agregar el m\u00f3dulo en <code>INSTALLED_APPS</code>. A\u00f1ade la siguiente configuraci\u00f3n a <code>PAYMENT_VARIANTS</code> en tu archivo <code>settings.py</code>:</p> <pre><code>PAYMENT_VARIANTS = {\n    \"flow\": (\"django_payments_chile.FlowProvider\", {\n        \"api_key\": \"flow_key\",\n        \"api_secret\": \"flow_secret\",\n        \"api_endpoint\": \"sandbox\",  # \"live\" o \"sandbox\"\n        \"api_medio\": 9,  # 9 indica todos los medios de pago\n    })\n}\n</code></pre>"},{"location":"providers/#khipu","title":"Khipu","text":"<p>No es necesario agregar el m\u00f3dulo en <code>INSTALLED_APPS</code>. A\u00f1ade la siguiente configuraci\u00f3n a <code>PAYMENT_VARIANTS</code> en tu archivo <code>settings.py</code>:</p> <p>La nueva version de la API de Khipu ya no usa el id de cobrador, debes generar una nueva API Key para ser usada ac\u00e1.</p> <pre><code>PAYMENT_VARIANTS = {\n    \"khipu\": (\"django_payments_chile.KhipuProvider\", {\n        \"api_key\": \"qwertyasdf0123456789\",\n    })\n}\n</code></pre>"},{"location":"providers/#payku","title":"Payku","text":"<p>A\u00f1ade la siguiente configuraci\u00f3n a <code>PAYMENT_VARIANTS</code> en tu archivo <code>settings.py</code>:</p> <pre><code>PAYMENT_VARIANTS = {\n    \"payku\": (\"django_payments_chile.PaykuProvider\", {\n        \"token_publico\": \"token_publico\",\n        \"token_privado\": \"token_privado\",\n        \"site\": \"sandbox\",  # \"production\" o \"sandbox\"\n    })\n}\n</code></pre>"},{"location":"providers/#notas-adicionales","title":"Notas adicionales","text":"<ul> <li>Aseg\u00farate de reemplazar los valores de ejemplo (como \"flow_key\", \"flow_secret\", etc.) con tus credenciales reales proporcionadas por cada proveedor de pagos.</li> <li>Para entornos de producci\u00f3n, cambia los valores de \"api_endpoint\" y \"site\" a \"live\" o \"production\" seg\u00fan corresponda.</li> <li>Consulta la documentaci\u00f3n oficial de cada proveedor para obtener informaci\u00f3n detallada sobre opciones de configuraci\u00f3n adicionales y mejores pr\u00e1cticas de implementaci\u00f3n.</li> </ul>"},{"location":"uso/","title":"Introducci\u00f3n a <code>django-payments-chile</code>","text":"<p><code>django-payments-chile</code> es una extensi\u00f3n para <code>django-payments</code>, una biblioteca que proporciona una interfaz universal para procesar pagos en aplicaciones Django. Este proyecto a\u00f1ade soporte espec\u00edfico para varios proveedores de pagos chilenos como Flow, Khipu, Webpay, y otros.</p> <p>Al ser una extensi\u00f3n de <code>django-payments</code>, su objetivo es facilitar la integraci\u00f3n de m\u00faltiples proveedores de pago sin necesidad de que desarrolles un sistema desde cero para cada uno.</p> <p>TL;DR</p> <p>Si prefieres ver una implementaci\u00f3n de ejemplo y comenzar r\u00e1pidamente, puedes clonar el Repositorio de ejemplo:</p>"},{"location":"uso/#requisitos","title":"Requisitos","text":"<p>Antes de empezar, aseg\u00farate de tener lo siguiente:</p> <ul> <li>Python instalado en tu sistema.</li> <li>Django para gestionar la aplicaci\u00f3n web.</li> <li>django-payments como el n\u00facleo para gestionar los pagos.</li> <li>django-payments-chile para integrar proveedores de pago en Chile.</li> </ul>"},{"location":"uso/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"uso/#instalacion-con-poetry","title":"Instalaci\u00f3n con Poetry","text":"<ol> <li> <p>Crea un nuevo proyecto y entorno virtual con Poetry:</p> <pre><code>poetry new mi-tienda\ncd mi-tienda\npoetry env use python3.10  # Reemplaza con la versi\u00f3n de Python que prefieras\n</code></pre> </li> <li> <p>Instala Django, <code>django-payments</code> y <code>django-payments-chile</code>:</p> <pre><code>poetry add django django-payments django-payments-chile\npoetry install\n</code></pre> </li> </ol> <p>Note</p> <p>Al instalar <code>django-payments-chile</code>, sus dependencias, como <code>django-payments</code> y <code>django</code>, se instalar\u00e1n autom\u00e1ticamente.</p>"},{"location":"uso/#configuracion-del-proyecto","title":"Configuraci\u00f3n del Proyecto","text":""},{"location":"uso/#crear-el-proyecto","title":"Crear el Proyecto","text":"<p>Inicia un nuevo proyecto de Django y una aplicaci\u00f3n para gestionar los pagos:</p> <pre><code>poetry run django-admin startproject tienda .\npoetry run django-admin startapp pagos\n</code></pre>"},{"location":"uso/#modificar-settingspy","title":"Modificar <code>settings.py</code>","text":"<p>Abre el archivo <code>settings.py</code> de tu proyecto y agrega las siguientes configuraciones de <code>django-payments</code>:</p> <pre><code>INSTALLED_APPS = [\n    # Otras aplicaciones de tu proyecto...\n    \"payments\",  # Core de django-payments\n    \"pagos\",  # Tu app personalizada para manejar pagos\n]\n\n# Configuraci\u00f3n de django-payments\nPAYMENT_HOST = 'mi-tienda.cl'  # Reemplaza con tu dominio\nPAYMENT_USES_SSL = True  # Usa True si tienes HTTPS, False en caso contrario\nPAYMENT_MODEL = 'pagos.modelos.Pago'  # Modelo personalizado para pagos\n\n# Configuraci\u00f3n para proveedores chilenos (ejemplo con Flow)\nPAYMENT_VARIANTS = {\n    \"flow\": (\"django_payments_chile.FlowProvider\", {\n        \"api_key\": \"tu_api_key_de_flow\",\n        \"api_secret\": \"tu_api_secret_de_flow\",\n    })\n}\n</code></pre> <p>Note</p> <p>Aseg\u00farate de reemplazar <code>'mi-tienda.cl'</code>, <code>'tu_api_key_de_flow'</code> y <code>'tu_api_secret_de_flow'</code> con tus datos reales.</p>"},{"location":"uso/#modificar-urlspy","title":"Modificar <code>urls.py</code>","text":"<p>Incluye las rutas necesarias en el archivo <code>urls.py</code> de tu proyecto o aplicaci\u00f3n:</p> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    # Otras rutas...\n    path('payments/', include('payments.urls')),\n]\n</code></pre>"},{"location":"uso/#creacion-del-modelo-de-pago","title":"Creaci\u00f3n del Modelo de Pago","text":"<p>Crea el modelo de pago en el archivo <code>pagos/modelos.py</code>, que gestionar\u00e1 los pagos y las redirecciones seg\u00fan el \u00e9xito o fracaso de los mismos:</p> <pre><code>from django.conf import settings\nfrom payments.models import BasePayment\n\nclass Pago(BasePayment):\n    def get_failure_url(self) -&gt; str:\n        # Redirige a esta URL si el pago falla\n        return f\"https://{settings.PAYMENT_HOST}/payments/{self.pk}/failure\"\n\n    def get_success_url(self) -&gt; str:\n        # Redirige a esta URL si el pago es exitoso\n        return f\"https://{settings.PAYMENT_HOST}/payments/{self.pk}/success\"\n</code></pre>"},{"location":"uso/#implementacion-en-las-vistas","title":"Implementaci\u00f3n en las Vistas","text":"<p>Usa <code>django-payments</code> en tus vistas para procesar pagos con los distintos proveedores. Aqu\u00ed tienes un ejemplo de c\u00f3mo crear y procesar un pago:</p> <pre><code>from django.shortcuts import redirect\nfrom payments import get_payment_model\n\ndef crear_pago(request):\n    Payment = get_payment_model()\n    payment = Payment.objects.create(\n        variant='flow',  # Debe coincidir con el nombre en PAYMENT_VARIANTS\n        description=\"Pago por Orden #123\",\n        total=10000,  # Monto en centavos (100 pesos)\n        currency='CLP',\n        billing_first_name='Juan',\n        billing_last_name='P\u00e9rez',\n        billing_email='juan.perez@example.com',\n    )\n    # Redirige al usuario a la URL del proveedor de pagos\n    return redirect(payment.get_process_url())\n</code></pre>"},{"location":"uso/#consejos-finales","title":"Consejos Finales","text":"<ul> <li>Pruebas: Aseg\u00farate de probar la implementaci\u00f3n en un entorno de desarrollo antes de desplegarla en producci\u00f3n.</li> <li>Seguridad: No subas tus claves de API o secretos a repositorios p\u00fablicos. Utiliza archivos de entorno o servicios seguros para gestionarlos.</li> <li>Documentaci\u00f3n Adicional: Consulta la documentaci\u00f3n oficial de django-payments para conocer todas las opciones y configuraciones avanzadas.</li> <li>Soporte: Si tienes dudas o problemas haz tu pregunta.</li> </ul>"}]}